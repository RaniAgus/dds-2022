@startuml iteracion-4

class Guardarropas {
  sugerir() : Atuendo
}

Guardarropas ..> Atuendo
Guardarropas --> "*" Prenda
Guardarropas -right-> ServicioMeteorologico

interface ServicioMeteorologico {
    getTemperatura()
}

ServicioMeteorologico .right.> Temperatura

ServicioMeteorologico <|.. AccuWeather

class AccuWeather {
    getTemperatura()
}

enum Temperatura {
    FRIO,
    TEMPLADO,
    CALIDO
    {static} of(unit, value)
    {static} ofCelsius(celsius)
    {static} ofFahrenheit(fahrenheit)
}

abstract UniformeFactory {
  crearUniforme()
  {abstract} getBorradorSuperior()
  {abstract} getBorradorInferior()
  {abstract} getBorradorCalzado()
}

UniformeFactory .right.> Atuendo : <<creates>>
UniformeFactory ..> Borrador
UniformeFactory ..> Borrador
UniformeFactory ..> Borrador

class Atuendo {
   superior
   inferior
   calzado
   accesorio
}

Atuendo --> Prenda
Atuendo --> Prenda
Atuendo --> Prenda
Atuendo --> Prenda

class Borrador {
  conTipo(tipo)
  conMaterial(material)
  conTrama(trama)
  conColorPrimario(colorPrimario)
  conColorSecundario(colorSecundario)
  (...)
  crearPrenda()
}

Borrador .right.> Prenda : <<creates>>

class Prenda {
 colorPrincipal : Color
 colorSecundario : Color
 estaLavandose : boolean
 temperaturasAptas : Temperatura[]
 esDeCategoria(categoria)
 esSugerible()
 esAptaPara(temperatura)
 usar()
 ponerALavar()
 lavar()
}

Prenda -right-> Tipo
Prenda --> Material
Prenda --> Trama
Prenda --> Estado

enum Material {
  ALGODON,
  CUERO,
  LANA,
  JEAN,
  ...
}

enum Trama {
  LISA,
  RAYADA,
  LUNARES,
  CUADROS,
  ESTAMPADO
}

enum Tipo {
  ANTEOJOS,
  ZAPATOS,
  ...
  esMaterialValido(material)
}

Tipo --> "*" Material
Tipo --> Categoria

enum Categoria {
  CALZADO
  PARTE_SUPERIOR,
  PARTE_INFERIOR,
  ACCESORIO
}

interface Estado {
 esSugerible()
 usar()
 lavar()
}

Estado <|.. Nueva
Estado <|.. Usada
Estado <|.. Sucia
Estado <|.. Percudida

Nueva .right.> Usada
Usada .right.> Sucia
Sucia .left.> Usada
Sucia .right.> Percudida

class Sucia {
  usos : Integer
}

@enduml
